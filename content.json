{"meta":{"title":"Змеи и прочие радости","subtitle":null,"description":null,"author":"Галкин Александр","url":"http://confar.github.io/blog"},"pages":[{"title":"categories","date":"2017-10-07T22:16:49.000Z","updated":"2017-10-20T17:09:39.000Z","comments":false,"path":"categories/index.html","permalink":"http://confar.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"Теги","date":"2017-10-07T22:16:30.000Z","updated":"2017-10-16T07:29:08.000Z","comments":false,"path":"tags/index.html","permalink":"http://confar.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Делаем архив без сохранения его на диск","slug":"django-archive","date":"2018-06-19T20:32:42.000Z","updated":"2018-06-19T20:53:04.589Z","comments":true,"path":"2018/06/19/django-archive/","link":"","permalink":"http://confar.github.io/blog/2018/06/19/django-archive/","excerpt":"","text":"Мы хотим сделать архив на лету, не засоряя файловую систему и сразу отдать на загрузку клиенту. Создадим объект BytesIO и запишем в него содержимое файлов из базы в цикле. для этого можно использовать obj.file.read() 12345678910111213141516171819202122232425262728293031323334def download_archive_product_card(request): \"\"\"Функция для создания архива прикрепленных документов\"\"\" docs_ids = request.GET.getlist('docs_ids') if not docs_ids: logger.warning(msg=\"Урл для архива документов не содержит идентификаторы документов\", request=request) return JsonResponse(&#123;'message': \"Please provide ids of docs you want for archive\"&#125;, status=400) docs_ids = [int(doc) for doc in docs_ids] docs = YourModel.get_cached_documents(docs_ids) archive = io.BytesIO() with zipfile.ZipFile(archive, \"a\") as zipf: for doc in docs: zipf.writestr('&#123;&#125;.&#123;&#125;'.format(doc.name, doc.extension), doc.file.read()) response = HttpResponse(zipf, content_type='application/zip') response['Content-Disposition'] = 'attachment; filename=%s' % 'archive.zip' archive.seek(0) response.write(archive.read()) return response#кэширование в models.pyclass YourModel(models.model): title = models.CharField(max_length = 255) thumbnail_url = models.CharField(max_length=255, default=None, null=True, blank=True) ...@staticmethoddef get_cached_documents(docs_ids): cache_key = '%s-%s-%s' % (__name__, 'your key', docs_ids) documents = cache.get(cache_key) if not documents: documents = list(Document.objects.filter(id__in=docs_ids)) cache.set(cache_key, documents, timeout=settings.CACHE_TTL) return documents","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://confar.github.io/blog/tags/python/"},{"name":"Django","slug":"Django","permalink":"http://confar.github.io/blog/tags/Django/"}]},{"title":"Пробросить объект в форму Django","slug":"django-forms","date":"2018-06-18T20:14:31.000Z","updated":"2018-06-19T20:48:31.925Z","comments":true,"path":"2018/06/18/django-forms/","link":"","permalink":"http://confar.github.io/blog/2018/06/18/django-forms/","excerpt":"","text":"Допустим, мы хотим профильтровать опции в инлайн форме в зависимости от инстанса объекта. И все это в админке. Для этого сначала можно пробросить его в keyword arguments формы, а затем получить оттуда 123456789101112131415161718192021222324252627class PageNodeAttachmentInline(admin.TabularInline): model = PageNodeAttachment form = PageNodeAttachmentForm formset = PageNodeAttachmentInlineFormSet extra = 2 class PageNodeAttachmentForm(forms.ModelForm): node_id = forms.ChoiceField() class Meta: model = PageNodeAttachment fields = ('node_id', 'page_type') def __init__(self, *args, **kwargs): attachment_page = kwargs.pop('attachment_page', None) super(PageNodeAttachmentForm, self).__init__(*args, **kwargs) self.fields['node_id'].choices = get_nodes_for_page(attachment_page)class PageNodeAttachmentInlineFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs): super(PageNodeAttachmentInlineFormSet, self).__init__(*args, **kwargs) attachment_page = kwargs.get('instance', None) if attachment_page: self.form_kwargs['attachment_page'] = attachment_page","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://confar.github.io/blog/tags/python/"},{"name":"Django","slug":"Django","permalink":"http://confar.github.io/blog/tags/Django/"}]},{"title":"Замена mysql на postgresql","slug":"mysql-postgresql","date":"2018-04-22T20:53:38.000Z","updated":"2018-04-22T21:01:59.999Z","comments":true,"path":"2018/04/22/mysql-postgresql/","link":"","permalink":"http://confar.github.io/blog/2018/04/22/mysql-postgresql/","excerpt":"","text":"На примере базы сдвора разбираем процесс перехода с mysql на postgresql создаем базу на постгрес 12sudo -u postgres psqlcreate database pgdatabasename; делаем виртуальное окружение для питона 2.7 и скачиваем утилиту py-mysql2pgsql 123virtualenv -p $(which python2.7) --no-site-packages ~/envs/py-mysql2pgsqlsource ~/envs/py-mysql2pgsql/bin/activatepip install py-mysql2pgsql запускаем 1py-mysql2pgsql -v В консоли видим ошибку, что конфига нет. Все верно, мы создали его этой командой.Открываем для правки любым текстовым редактором.1vi mysql2pgsql.yml оставляем структуру как есть, правим часть с базами12345678910111213141516mysql:hostname: хост mysql, лучше сдампить и перевести на локалхостport: 3306socket: оставляем пустымusername: mysqluserpassword: mysqlpassdatabase: mysqldatabasenamecompress: falsedestination:file: оставляем пустым - если указать, будет записывать в файлpostgres:hostname: localhostport: 5432username: pguserpassword: pgpassdatabase: pgdatabasename правим файл библиотеки утилиты (нужно чтобы не наткнуться на ошибку с переводом дат)\\mysql2pgsql\\lib\\postgres_writer.py строка 72 меняем1elif column[&apos;type&apos;] == &apos;datetime&apos;: на1elif column[&apos;type&apos;] == &apos;datetime&apos; or column[&apos;type&apos;].startswith(&apos;datetime(&apos;): запускаем утилиту еще разpy-mysql2pgsql -v натыкаемся на ошибку enum в базе shops Правим колонки в mysql, заменяем enum на varchar12345678910ALTER TABLE shops ADD new_type_address ENUM(&apos;magazin&apos;, &apos;rc&apos;, &apos;otdelprodazh&apos;, &apos;dist-point&apos;) DEFAULT &apos;magazin&apos; NULL;UPDATE shops SET new_type_address = type_address;ALTER TABLE shops DROP type_address;ALTER TABLE shops CHANGE new_type_address type_address VARCHAR(55) NULL;ALTER TABLE shops ADD new_type_company ENUM (&apos;sdvor&apos;, &apos;teplocentr&apos;) DEFAULT &apos;sdvor&apos; NOT NULL;UPDATE shops SET new_type_company = type_company;ALTER TABLE shops DROP type_company;ALTER TABLE shops CHANGE new_type_company type_company VARCHAR(55) NOT NULL; Запускаем скрипт снова, базу можно не дропать в процессе можно наткнуться на такую ошибкуpsycopg2.IntegrityError: insert or update on table “cart_items” violates foreign key constraint “cart_items_cart_id_fkey”DETAIL: Key (cart_id)=(226567) is not present in table “cart”. и как аналогpsycopg2.IntegrityError: insert or update on table “orders_pickups” violates foreign key constraint “orders_pickups_order_id_fkey”DETAIL: Key (order_id)=(49595) is not present in table “orders”. Ошибка говорит о том, что заказа, на который ссылается самовывоз, не существует. Нам такие записи в базе не нужны (по причине того, что связаны с уже неактуальным заказом) и в этом случае удаляем строку с соответствующим key_id из таблицы cart_items или другой, по аналогии.1234567891011DELETE ci FROM cart_items ci LEFT outer join cart c on c.id = ci.cart_idwhere c.id is NULLDELETE opk FROM orders_pickups opk LEFT outer join orders o on o.id = opk.order_idwhere o.id is NULLDELETE opr FROM orders_products opr LEFT outer join orders o on o.id = opr.order_idwhere o.id is NULLDELETE osh FROM orders_statuses_history osh LEFT outer join orders o on o.id = osh.order_idwhere o.id is NULL Если все прошло успешно, то у нас есть готовая база постгреса. Меняем database ENGINE в сеттингах джанги на psycopg2, делаем makemigrations и migrate, сносим конфликтующие миграции (в случае сдвора были миграции orders и banners)","categories":[],"tags":[]},{"title":"Простой https server на localhost python","slug":"localhost","date":"2018-02-07T23:08:36.000Z","updated":"2018-02-07T23:39:49.000Z","comments":true,"path":"2018/02/08/localhost/","link":"","permalink":"http://confar.github.io/blog/2018/02/08/localhost/","excerpt":"","text":"Порой нужно развернуть собственный сервер, и важно чтобы он был secure, https. И сегодня мы рассмотрим как это делается, используя самоподписанные сертификаты. Для начала установите openssl с помощью менеджера пакетов, если он еще не установлен Сенерируем ключ сервера1$ openssl genrsa -des3 -out server.key 1024 Вам будет предложено ввести пароль для вашего ключа. Введите, подтвердите и продолжите. Создайте свой запрос подписи сертификата (CSR)1$ openssl req -new -key server.key -out server.csr Вам будет предложено ввести пароль для ключа. Введите тот, который вы создали с шага 1 выше. Затем вы можете принять значения по умолчанию для всех приглашений, которые вам представлены, за исключением Common Name. Это как раз и сделает расширенную проверку сертификатов валидной. Поскольку мы делаем локальную разработку, ваше Common name будет localhost. 1Common Name (e.g. server FQDN or YOUR name) []:localhost Создайте свой сертификат.Наконец, нам нужно создать наш сертификат. Опять же, используйте свой пароль для ключа, указанный ранее. 1$ openssl x509 -req -days 1024 -in server.csr -signkey server.key -out server.crt Сгенерировать файл pem1$ cat server.crt server.key&gt; server.pem Реализация сервера Python: 12345678#!/usr/bin/pythonimport BaseHTTPServer, SimpleHTTPServerimport sslhttpd = BaseHTTPServer.HTTPServer (('localhost', 4443), SimpleHTTPServer.SimpleHTTPRequestHandler)httpd.socket = ssl.wrap_socket (httpd.socket, certfile = '/ path / to / server.pem', server_side = True)httpd.serve_forever () Запустить $ python server.py Хост по умолчанию здесь - localhost, а порт - 4443. Отлично! Мы развернули сервер https. Перейдем в https://localhost:4443 и нажмем «Дополнительно»&gt; «Перейти» на «localhost» (небезопасно), чтобы принимать сертификаты и просматривать файлы сервера","categories":[],"tags":[]},{"title":"Аналитический обзор технологии NLP","slug":"nlp-tech-report","date":"2017-11-20T16:12:01.000Z","updated":"2017-11-22T20:49:37.000Z","comments":true,"path":"2017/11/20/nlp-tech-report/","link":"","permalink":"http://confar.github.io/blog/2017/11/20/nlp-tech-report/","excerpt":"","text":"Как-то меня попросили сделать обзор применения технологии обработки естественного языка или Natural Language Processing на английском. Ни в коем случае не путать с нейро-лингвистическим программированием, о котором так любят говорит коучи и прочие self-help гуру. Переводить на русский не буду, поэтому вывешу сюда как есть, может быть кому-то пригодится=) Natural language processing as a serviceNatural language processing is a field at the intersection of computer science, artificial intelligence and linguistics.The goal for computers is to process or “understand” natural language in order to perform tasks that are useful, for example performing tasks, like making appointments or buying things.The alternate usage is question answering and human-to-machine communations (Siri, Google Assistant, Facebook M, Cortana). TechPrimarily, the architecture is more or less the same – the spoken(or written) input (top left) is analyzed, words are recognized, sentences are parsed and interpreted in context, application-specific actions take place (top right); a response is planned, realized as a syntactic structure, then to suitably inflected words, and finally to spoken output; different types of linguistic knowledge inform each stage of the process. Trends (more on each later) – Interactive Voice Response (IVR) Optical Character Recognition (OCR) Pattern and Image Recognition Classification and Categorization Text Analytics Speech Analytics Support and Maintenance Services Since the sphere is deeply interconnected with machine and deep learning, any sufficient progress in these spheres will affect the language recognition dramatically. Tech barriersNatural language systems that have been deployed for real-world applications still cannot perform common-sense reasoning or draw on world knowledge in a general and robust manner.Natural language processing is successful in meeting the challenges as far as syntax is concerned. But it still has to go a long way in the areas of semantics, e.g. finding the meaning of a word or a word sense, determining scopes of quantifiers, finding referents and context. Barriers of non-tech originThe government regulation and laws that prohibit solution to language barriers is a huge difficulty. Low adoption rates are also stopping the growth. Areas that have no need to enter a multilingual marketplace are failing by a global community. Main customers and why do they need it? Government agencies NLP Original Equipment Manufacturers (OEMs) NLP service providers System integrators Consulting firms Research organizations Resellers and distributors Media The demand for NLP solutions is fueled mostly by the increased need to process unstructured and semi-structured data in enterprise networks. The rapid expansion in the acceptance of social networking and social media platforms and the growing focus on social media monitoring and social media intelligence (SMI) are other compelling factors influencing demand for NLP technologies. How are the companies using it? NLP technologies are gaining traction in text analytics, designed to unlock business value buried within the vast data assets of a company in a resourceful and seamless manner. Examples – Addstructure, Angel.ai, Klevu Speech analytics is another important and growing application area, where NLP tools are finding preference for capturing the voice of the customer taking into consideration phrasing, punctuation, and tone of voice and other parameters. Examples – api.ai, mindmeld As a recognition platform, NLP is sensing opportunities in interactive voice recognition (IVR), image recognition, and optical character recognition (OCR) verticals. Spam mail blocking is another growing use case for NLP technologies. By end-use sector, NLP technologies are making strong gains in healthcare &amp; life sciences, banking &amp; financial services, insurance, legal, IT &amp; telecom, government, media &amp; advertisement, and consumer electronics among others. Examples - Lexalytics A key trend making waves in the market is the growing popularity of cloud-based NLP-as-a-Service solutions Examples – DigitalGenius, Inbenta Business modelThe most famous verticals for NLP are: Banking, Financial Services, and Insurance (BFSI) Manufacturing Healthcare and Life Sciences Retail and Consumer Goods Research and Education High Tech and Electronics Media and Entertainment The most common business model is NLP-as-a Service. The companies setup online services that rely on their tools, and provide a free number of API calls for those, charging for additional calls (or call-range) to your API. Or it could be a full version, for example chatbot text recognition in customer service with annual payments for the service. Market assessmentAccording to Markets and Markets , the NLP market size is estimated to grow from USD 7.63 Billion in 2016 to USD 16.07 Billion by 2021, at a Compound Annual Growth Rate (CAGR) of 16.1%.The major forces driving the NLP market are increase in demand for enhanced customer experience, increase in usage of smart devices, number of emerging options in application areas, increased investment in healthcare industry, increased deployment of web &amp; cloud-based business applications, and growth in machine-to-machine technology North America is expected to have the largest market share and would dominate the NLP market from 2016 to 2021, due to the presence of a large number of NLP vendors.East Asia offers potential growth opportunities for the NLP market. The key factors driving the growth rate in this market are increasing data generation in business organizations, growing demand for enhanced customer experience, and increase in the adoption and utility of smart devices.In the NLP market, solution vendors such as 3M, Apple Incorporation, Dolbey Systems, Google, HP, IBM Incorporation, Microsoft Corporation, NetBase Solutions, SAS Institute Inc., and Verint Systems offer high-end NLP solutions.All in all, the market is growing rapidly. What kind of bisuness has a potential in NLP? Assistants – marketing, sales or financial corporate assistant/ examples - Aiden, Einstein Online service consultants – chatbots - Yamichat HR companies – help to automate the calls with the canditates. For example, Amelia and one Russian startup. Corporations dealing with troubled customers or the ones who want to analyze the worker’s attitude towards their occupation - Semantria","categories":[],"tags":[{"name":"nlp","slug":"nlp","permalink":"http://confar.github.io/blog/tags/nlp/"},{"name":"analytics","slug":"analytics","permalink":"http://confar.github.io/blog/tags/analytics/"}]},{"title":"Пишем веб-приложение на Django","slug":"django-auth-app","date":"2017-11-13T12:13:04.000Z","updated":"2017-11-22T20:49:39.000Z","comments":true,"path":"2017/11/13/django-auth-app/","link":"","permalink":"http://confar.github.io/blog/2017/11/13/django-auth-app/","excerpt":"","text":"В этой части будем реализовывать механизм авторизации пользователей через страницы логина и регистрации на Django 1.11 c валидацией форм и возможностью logout. В статье приведен код для python3. Создание проектаДля начала создадим проект myproject через консоль в нужной нам папке и перейдем в папку проекта. Внутри проекта создадим приложение джанго - registration 123$ django-admin startproject myproject$ cd myproject$ python manage.py startapp registration теперь структура внутри registration выглядит следующим образом 12345678│ admin.py│ apps.py│ models.py│ tests.py│ views.py│ __init__.py│└───migrations Так как в Django реализована архитектура MVC, то в нашем случае “M” - models.py, это файл, где прописывается логика взаимодействия с базой данных, “C”, в случае Django “Template”, это представление данных в браузере через html, а views это бизнес-логика, как применять модели и шаблоны. Годная картинка по теме: Так как авторизация в нашем случае для тестового проекта, а не для большого e-commerce сайта, то реализуем взаимодействие с базой данных не через models.py, а через форму и встроенную в Django модель User, так что файл models.py можем удалять, как и tests.py - в этой части мы их оставим. Теперь структура нашего приложения выглядит так: 1234567│ admin.py│ apps.py│ forms.py│ views.py│ __init__.py│└───migrations Всего у нас будет три страницы html: для тех, кто пришел в первый раз(login.html), для регистрации(register.html) и для тех, кто успешно прошел регистрацию и зашел через логин(success.html). Итого у нас два use-case для пришедших в первый раз: login -&gt; register -&gt; login -&gt; success для пришедших повторно login -&gt; success Обрабатывать результаты будем через формы и регистрационные данные записывать в базу данных sqlite3(которая создается по умолчанию для проекта Django). Перейдем к коду. Находим наши страницыДля примера возьмем бутстраповские страницы логина и регистрации и немного их изменим, дополнив тегами Jinja2. Все темплейты хранятся в папке templates, которую мы создадим в основном проекте.Таким образом, структура проекта со всеми добавленными темплейтами будет выглядеть так: 1234567891011|-- myproject| `-- __pycache__|-- registration| |-- __pycache__| `-- migrations| `-- __pycache__|-- templates| -- base.html| -- login.html| -- register.html` -- success.html Код страницы логина. При сабмите формы идет ссылка на функцию account_login c post запросом. {% csrf_token %} это обеспечение безопасности от межсайтовой подделки запроса. Используется в формах в связи с post-запросами. Они опаснее обычных get запросов, т.к. взаимодействуют с базой данных. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&#123;% extends \"base.html\" %&#125;&#123;% block title %&#125;Login&#123;% endblock %&#125;&#123;% block content %&#125;&lt;div class=\"container\" style=\"margin-top:40px\"&gt;&lt;div class=\"row\"&gt;&lt;div class=\"col-sm-6 col-md-4 col-md-offset-4\"&gt;&lt;div class=\"panel panel-default\"&gt;&lt;div class=\"panel-heading\"&gt;&lt;strong&gt; Sign in to continue&lt;/strong&gt;&lt;/div&gt;&lt;div class=\"panel-body\"&gt;&#123;% if error %&#125;&lt;p class=\"text-danger\"&gt;Please enter a correct username and password.Note that both fields may be case-sensitive.&lt;/p&gt;&#123;% endif %&#125;&lt;form role=\"form\" action=\"&#123;% url \"account_login\" %&#125;\" method=\"POST\"&gt;&#123;% csrf_token %&#125;&lt;fieldset&gt;&lt;div class=\"row\"&gt;&lt;div class=\"center-block\"&gt;&lt;img class=\"profile-img\" src=\"http://bit.ly/2gSVBOy\" alt=\"\" style=\"width: 96px; height: 96px; margin: 0 auto 10px; display: block; -moz-border-radius: 50%; -webkit-border-radius: 50%; border-radius: 50%;\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\"row\"&gt;&lt;div class=\"col-sm-12 col-md-10 col-md-offset-1 \"&gt;&lt;div class=\"form-group\"&gt; &lt;div class=\"input-group\"&gt; &lt;span class=\"input-group-addon\"&gt; &lt;i class=\"glyphicon glyphicon-user\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;input class=\"form-control\" placeholder=\"Username\" name=\"username\" type=\"text\" autofocus&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"form-group\"&gt; &lt;div class=\"input-group\"&gt; &lt;span class=\"input-group-addon\"&gt; &lt;i class=\"glyphicon glyphicon-lock\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;input class=\"form-control\" placeholder=\"Password\" name=\"password\" type=\"password\" value=\"\"&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"form-group\"&gt; &lt;button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\"&gt;Sign in &lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/fieldset&gt;&lt;/form&gt;&lt;/div&gt;&lt;div class=\"panel-footer\" style=\"padding: 1px 15px;color: #A0A0A0\"&gt;Don't have an account? &lt;a href=\"&#123;% url \"account_register\" %&#125;\"&gt; Sign Up Here &lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#123;% endblock %&#125; Как выглядит в браузере Код страницы регистрации с валидацией ошибок. При сабмите формы также идет ссылка на функцию account_register c post запросом. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&#123;% extends \"base.html\" %&#125; &#123;% block title %&#125;Register&#123;% endblock %&#125;&#123;% block content %&#125;&lt;div class=\"container\" style=\"margin-top: 60px\"&gt;&lt;div class=\"row centered-form\"&gt;&lt;div class=\"col-xs-12 col-sm-8 col-md-4 col-sm-offset-2col-md-offset-4\"&gt;&lt;div class=\"panel panel-default\"&gt;&lt;div class=\"panel-heading\"&gt;&lt;h3 class=\"panel-title\"&gt;Register&lt;/h3&gt;&lt;/div&gt;&lt;div class=\"panel-body\"&gt;&lt;form role=\"form\" method=\"POST\" action=\"&#123;% url \"account_register\" %&#125;\"&gt;&#123;% csrf_token %&#125; &lt;div class=\"form-group&#123;% if errors.username %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"username\" name=\"username\" id=\"username\" class=\"form-control input-sm\" placeholder=\"Username\"&gt; &lt;span class=\"text-danger\"&gt; &#123;&#123; errors.username|striptags &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-6 col-sm-6 col-md-6\"&gt; &lt;div class=\"form-group&#123;% if errors.first_name %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"text\" name=\"first_name\" id=\"first_name\" class=\"form-control input-sm\" placeholder=\"First Name\"&gt; &lt;span class=\"text-danger\"&gt; &#123;&#123; errors.first_name|striptags &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-sm-6 col-md-6\"&gt; &lt;div class=\"form-group&#123;% if errors.last_name %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"text\" name=\"last_name\" id=\"last_name\" class=\"form-control input-sm\" placeholder=\"Last Name\"&gt; &lt;span class=\"text-danger\"&gt; &#123;&#123; errors.last_name|striptags &#125;&#125;&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group&#123;% if errors.email %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"email\" name=\"email\" id=\"email\" class=\"form-control input-sm\" placeholder=\"Email Address\"&gt; &lt;span class=\"text-danger\"&gt;&#123;&#123; errors.email|striptags &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-6 col-sm-6 col-md-6\"&gt; &lt;div class=\"form-group&#123;% if errors.password %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"password\" name=\"password\" id=\"password\" class=\"form-control input-sm\" placeholder=\"Password\"&gt; &lt;span class=\"text-danger\"&gt;&#123;&#123; errors.password|striptags &#125;&#125; &lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-sm-6 col-md-6\"&gt; &lt;div class=\"form-group&#123;% if errors.password %&#125; has-error&#123;% endif %&#125;\"&gt; &lt;input type=\"password\" name=\"confirm_password\" id=\"confirm_password\" class=\"form-control input-sm\" placeholder=\"Confirm Password\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-info btn-block\"&gt;Register&lt;/button&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#123;% endblock %&#125; Как выглядит страница регистрации И страницу успешного входа мы увидим уже в конце, если у нас все получится=) В начале каждого документа стоит тег {% extends \"base.html\" %}, что является расширением одного темплейта на базе основного, в Джанго основной темплейт классически называется base.html. Это удобно, так как не приходится копировать один и тот же код в хедере разных страниц. Получается, что весь контент отдельной страницы помещается между тегами {% block content %} и {% endblock %} . Подробнее можно почитать здесь. Содержание base.html 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;&#123;% block title %&#125; &#123;% endblock %&#125; | Auth app&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &#123;% block content %&#125; &#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; Пишем вьюжкиДля обработки страниц в файле views.py пишем три функции на каждую из страниц (login,register,success) и одну функцию logout. Импортируем нужные нам модули Django, из интересных штук тут есть декоратор login_required, который “дополняет” функцию успешного входа - success(), проверяя прошел ли предварительно логин в системе. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364from django.contrib.auth.decorators import login_requiredfrom django.contrib.auth.forms import AuthenticationFormfrom django.contrib.auth.models import Userfrom django.contrib.auth import login, logoutfrom django.template.response import TemplateResponsefrom django.http import HttpResponseRedirectfrom django.urls import reversefrom .forms import UserCreateFormdef login(request): \"\"\" Функция, которая принимает http-запрос, если произведен get-запрос, возвращает страницу логина. Если post-запрос, берет данные из базы данных, и проверяет логин и пароль с помощью встроенной формы AuthenticationForm, при успешном сценарии вызывает метод login, который принимает объект реквеста и юзера, сохраняет id usera в сессию Django и возвращает страницу success \"\"\" if request.method == 'POST': form = AuthenticationForm(data=request.POST) if form.is_valid(): login(request, form.user_cache) return HttpResponseRedirect(reverse('account_success')) else: return TemplateResponse(request, 'login.html', &#123;'error': True&#125;) else: return TemplateResponse(request, 'login.html', &#123;&#125;)@login_requireddef success(request): \"\"\" Функция, которая принимает http-запрос get и возвращает страницу success, если пользователь успешно залогинен.\"\"\" return TemplateResponse(request, 'success.html', &#123;&#125;)@login_requireddef account_logout(request):\"\"\" Функция, которая принимает http-запрос и разлогинивает пользователя. \"\"\" logout(request) return HttpResponseRedirect(reverse('account_login'))def account_register(request): \"\"\" Функция, которая принимает http запрос, если произведен get-запрос, возвращает страницу регистрации. Если post-запрос, проверяет форму UserCreateForm на валидность, при успешном завершении заносит данные в таблицу auth_user в базу. При успешном сценарии возвращает обратно на страницу логина \"\"\" form = UserCreateForm() if request.method == 'POST': form = UserCreateForm(data=request.POST) if form.is_valid(): user = User( username=form.cleaned_data.get('username'), email=form.cleaned_data.get('email'), first_name=form.cleaned_data.get('first_name'), last_name=form.cleaned_data.get('last_name') ) user.set_password(form.cleaned_data.get('password')) user.save() return HttpResponseRedirect(reverse('account_login')) return TemplateResponse(request, 'register.html', &#123;'errors': form.errors&#125;) else: return TemplateResponse(request, 'register.html', &#123;\"form\": form&#125;) Разбираемся с формамиВ функции register мы ссылаемся на форму UserCreateForm, которая находится в forms.py. В этом файле мы прописываем нужные нам поля из страницы регистрации. Метод clean() выполняет роль проверки совпадения значений, которые пользователь указывает в “введите пароль” и “повторно введите пароль”. 1234567891011121314151617181920from django.forms import Form, CharField, EmailFieldfrom django.forms.utils import ErrorListclass RegistrationForm(Form): username = CharField(required=True) email = EmailField(required=True) password = CharField(required=True) confirm_password = CharField(required=True) first_name = CharField(required=False) last_name = CharField(required=False) def clean(self): cleaned_data = super(RegistrationForm, self).clean() if cleaned_data.get('password') != cleaned_data.get('confirm_password'): self._errors['password'] = ErrorList('The passwords you entered do not match') return cleaned_data Конфигурация URL-овТеперь самое время настроить ссылки, по которым мы будем обращаться к нашим функциям во views. Для этого в файле urls.py внутри папки приложения registration пропишем следующее:12345678910from django.conf.urls import urlfrom registration import viewsurlpatterns = [ url(r'^login/', views.account_login, name='account_login'), url(r'^success/', views.account_success, name='account_success'), url(r'^register/', views.account_register, name='account_register'), url(r'^logout/', views.account_logout, name='account_logout'),] Таким образом, мы обозначаем, что если пользователь перешел по ссылке адресприложения/account/login, то вызывается функция views.login, если другой запрос - остальные ссылки по аналогии. Для конфигурации ссылок в Джанго используются регулярные выражения, тема обширная, думаю, для отдельной статьи. Пока что просто воспримем как есть. Затем включим эти url в наше основное приложение - myproject, чтобы обращаться к приложению registration. Для этого в папке myproject в файле urls.py исправим следующее 12345678from django.conf.urls import url, include # добавляем метод includefrom django.contrib import admin # это прописывается автоматически, не меняемurlpatterns = [ url(r'^admin/', admin.site.urls), # также не меняем url(r'^account/', include('registration.urls')) # добавляем urls нашего приложения registration] Теперь мы должны получить страницу логина при входе. Таким образом, ссылки как бы нанизываются друг на друга. account + login в url передаст в браузер нужную нам страницу логина. Попробуем. Для корректной работы формы сделаем миграцию базы данных и запустим проект. 123$ python manage.py makemigrations$ python manage.py migrate$ python manage.py runserver Результаты Ну чтож, даже ребята со стоковых фото считают, что мы молодцы. Уж они явно что-то знают. Код этой статьи можно найти в моем репозитории на github.","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://confar.github.io/blog/tags/python/"},{"name":"Django","slug":"Django","permalink":"http://confar.github.io/blog/tags/Django/"},{"name":"web","slug":"web","permalink":"http://confar.github.io/blog/tags/web/"},{"name":"bootstrap","slug":"bootstrap","permalink":"http://confar.github.io/blog/tags/bootstrap/"}]},{"title":"Web Scraping средствами Beautiful Soup","slug":"web-scraping","date":"2017-11-07T11:35:12.000Z","updated":"2017-11-22T20:49:40.000Z","comments":true,"path":"2017/11/07/web-scraping/","link":"","permalink":"http://confar.github.io/blog/2017/11/07/web-scraping/","excerpt":"","text":"Сегодня поговорим о веб скрапинге. Допустим, стоит задача выгрузить информацию с сайта или нескольких и представить ее в таблице. Для примера я возьму techcrunch и mashable. На выходе хочу получить таблицу с колонками [текст], [краткое описание], [ссылка], чтобы не тратить время на бесконечное зависание на сайтах, ну вы знаете как это бывает=) БиблиотекиНачнем с импорта. Для работы с http лучший выбор это requests, а для парсинга html будем классически работать с Beautiful Soup. Ну и pandas для удобной работы с данными и выгрузки в csv. 1234import requestsfrom bs4 import BeautifulSoupfrom numpy import nan as NaNimport pandas as pd Нахождение нужных нам элементовНапишем скрипт, выполняющий get-запрос, записав его в переменную, затем преобразуем полученный текст страницы в объект BeautifulSoup.В качестве аргумента get-запроса передадим ссылку на раздел startups, там все веселье. 12r1 = requests.get('https://techcrunch.com/startups/')soup = BeautifulSoup(r1.text, 'html.parser') Здесь мы получим на выходе кусок html, который выглядит примерно так(для примера приведен только отрывок). 1234567&lt;ul class=\"subnav-channel\" data-omni-sm-delegate=\"gbl_mainnav\"&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category current-menu-item menu-item-899745\" id=\"menu-item-899745\"&gt;&lt;a href=\"https://techcrunch.com/startups/\"&gt;Startups&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-899746\" id=\"menu-item-899746\"&gt;&lt;a href=\"https://techcrunch.com/mobile/\"&gt;Mobile&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category menu-item-899747\" id=\"menu-item-899747\"&gt;&lt;a href=\"https://techcrunch.com/gadgets/\"&gt;Gadgets&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category menu-item-899748\" id=\"menu-item-899748\"&gt;&lt;a href=\"https://techcrunch.com/enterprise/\"&gt;Enterprise&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category menu-item-899749\" id=\"menu-item-899749\"&gt;&lt;a href=\"https://techcrunch.com/social/\"&gt;Social&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-taxonomy menu-item-object-category menu-item-899750\" id=\"menu-item-899750\"&gt;&lt;a href=\"https://techcrunch.com/europe/\"&gt;Europe&lt;/a&gt;&lt;/li&gt;&lt;li class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-901944\" id=\"menu-item-901944\"&gt;&lt;a href=\"/asia\"&gt;Asia&lt;/a&gt;&lt;/li&gt; Открываем нашу ссылку в браузере через F12 и находим нужные нам элементы - тег с названием(будем искать по title), описанием(description) и url. В случае с techcrunch все нужные нам ссылки находятся в “диве” block-content, в котором находится каждый пост. Для подобного сценария в BS есть метод find_all(), который находит все возможные вхождения тега с заданными параметрами.Затем мы создаем простой for луп и пустой список, куда записываем нужные нам данные, которые также ищем по тегам внутри block-content. 1234567resultstech = soup.find_all('div', 'block-content',)recordstech = []for result in resultstech: title = result.find('h2').text.strip() desc = result.find('p', 'excerpt').text[:-10].strip() link = result.find('a')['href'] recordstech.append((title, desc, link)) Для удобства обрезаем пробелы с помощью метода strip(), и последние десять символов в desc, обратившись к ним по индексу[:-10], т.к. они представляют собой фразу “Read More” для каждого поста. На выходе мы получили список из кортежей, где находятся наши данные. Проделаем тоже самое с mashable123456789r2 = requests.get('http://mashable.com/tech/')soup = BeautifulSoup(r2.text, 'html.parser')resultsmash = soup.find_all('article')recordsmash = []for result in resultsmash: title = result.find('h1').text link = result.find('a')['href'] recordsmash.append((title, link)) Тут не всегда есть подробные описания, поэтому мы остановимся на названии и ссылке. Обработка с помощью pandasСоздадим два датафрейма pandas для того, чтобы красиво соединить наши данные. Для визуального разделения данных сделаем пустой ряд - empty row с помощью вставки not a number - “NaN” из numpy, после каждого набора данных. 1234567dftech = pd.DataFrame(recordstech, columns=['title', 'desc', 'link'])empty_row3 = pd.Series([NaN, NaN, NaN], index=['title', 'desc', 'link'])dftech_empty_row = dftech.append(empty_row3, ignore_index=True)dfmash = pd.DataFrame(recordsmash, columns=['title', 'link'])empty_row2 = pd.Series([NaN, NaN], index=['title', 'link'])dfmash_empty_row = dfmash.append(empty_row2, ignore_index=True) После этого соединим наши датафреймы с помощью метода concat() 12frames = [dftech_empty_row, dfmash_empty_row]results = pd.concat(frames) Открываем таблицуЗапишем результаты в csv 1results.to_csv('parsing.csv'), index=False, encoding='utf-8') откроем csv файл с помощью текстового редактора и зададим разделение sep=, в самом начале если нужно открыть в экселе либо откроем в google sheets Картинка ниже как именно выглядит результат Готово. Можете применить подобную операцию ко всем сайтам в интересной вам индустрии, и на выходе получить сводку всех новостей в одной таблице, определив что вам полезно, а что нет. И не тратить время на бесконечный скроллинг веба=) Предварительно ознакомьтесь с правилами сайта, для этого прибавьте к корневому url адресу /robots.txt и узнайте, можно ли его “скрейпить”. Некоторые сайты предоставляют отдельное api для скрейпинга, но об этом уже в другой раз. Ссылки Полный код можно найти в моем репозитории на github Документация BeautifulSoup Классная статья о скрейпинге общественных ресурсов","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://confar.github.io/blog/tags/python/"},{"name":"scraping","slug":"scraping","permalink":"http://confar.github.io/blog/tags/scraping/"},{"name":"pandas","slug":"pandas","permalink":"http://confar.github.io/blog/tags/pandas/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-01T11:35:12.000Z","updated":"2017-11-22T20:49:41.000Z","comments":true,"path":"2017/11/01/hello-world/","link":"","permalink":"http://confar.github.io/blog/2017/11/01/hello-world/","excerpt":"","text":"Решил поднять сайт. Тут будут различные заметки про программирование и аналитику.","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://confar.github.io/blog/tags/python/"}]}]}